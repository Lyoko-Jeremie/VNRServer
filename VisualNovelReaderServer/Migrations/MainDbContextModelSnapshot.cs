// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisualNovelReaderServer.Data;

namespace VisualNovelReaderServer.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2");

            modelBuilder.Entity("VisualNovelReaderServer.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreationComment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Disliked")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EditorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<int>("Liked")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RevisionComment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RevisionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("GameId");

                    b.HasIndex("GameItemId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Md5")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TextSettingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GameItemId");

                    b.HasIndex("TextSettingId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.GameItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnnotCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Artists")
                        .HasColumnType("TEXT");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ecchi")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EcchiScoreCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EcchiScoreSum")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Musicians")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Okazu")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Otome")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OverallScoreCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OverallScoreSum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayUserCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RomajiTitle")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScapeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScapeMedian")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SdArtists")
                        .HasColumnType("TEXT");

                    b.Property<string>("Series")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubtitleCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<int>("TopicCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Wiki")
                        .HasColumnType("TEXT");

                    b.Property<string>("Writers")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("GameItem");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.GameName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameName");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GameId");

                    b.HasIndex("GameItemId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContextType")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreationComment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Disabled")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EditorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FromLanguage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IgnoreCase")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHentai")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPhrase")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRegex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pattern")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RevisionComment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RevisionTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ruby")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Translators")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EditorId");

                    b.HasIndex("GameId");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.TextHook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sig")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TextSettingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TextSettingId");

                    b.ToTable("TextHook");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.TextSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Encoding")
                        .HasColumnType("TEXT");

                    b.Property<string>("HookCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IgnoreRepeat")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("KeepAllText")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("KeepSpaces")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RemoveRepeat")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TextSetting");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccessTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("Color")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("HomePage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.Comment", b =>
                {
                    b.HasOne("VisualNovelReaderServer.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualNovelReaderServer.Models.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("VisualNovelReaderServer.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualNovelReaderServer.Models.GameItem", "GameItem")
                        .WithMany()
                        .HasForeignKey("GameItemId");

                    b.OwnsOne("VisualNovelReaderServer.Models.Context", "Context", b1 =>
                        {
                            b1.Property<int>("CommentId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Content")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Hash")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Size")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CommentId");

                            b1.ToTable("Comment");

                            b1.WithOwner()
                                .HasForeignKey("CommentId");
                        });
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.Game", b =>
                {
                    b.HasOne("VisualNovelReaderServer.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualNovelReaderServer.Models.GameItem", "GameItem")
                        .WithMany()
                        .HasForeignKey("GameItemId");

                    b.HasOne("VisualNovelReaderServer.Models.TextSetting", "TextSetting")
                        .WithMany()
                        .HasForeignKey("TextSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.GameItem", b =>
                {
                    b.HasOne("VisualNovelReaderServer.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.GameName", b =>
                {
                    b.HasOne("VisualNovelReaderServer.Models.Game", null)
                        .WithMany("Names")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.Reference", b =>
                {
                    b.HasOne("VisualNovelReaderServer.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualNovelReaderServer.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualNovelReaderServer.Models.GameItem", "GameItem")
                        .WithMany()
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.Term", b =>
                {
                    b.HasOne("VisualNovelReaderServer.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VisualNovelReaderServer.Models.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("VisualNovelReaderServer.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("VisualNovelReaderServer.Models.TextHook", b =>
                {
                    b.HasOne("VisualNovelReaderServer.Models.TextSetting", null)
                        .WithMany("Hooks")
                        .HasForeignKey("TextSettingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
